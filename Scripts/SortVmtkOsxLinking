#!/usr/bin/env python
# This file is part of HemeLB and is Copyright (C)
# the HemeLB team and/or their institutions, as detailed in the
# file AUTHORS. This software is provided under the terms of the
# license in the file LICENSE.

import sys
import os
import subprocess
import glob
import argparse

p = argparse.ArgumentParser()
p.add_argument('--itk', help='ITK library directory')
p.add_argument('--vmtk', help='VMTK library directory')
args = p.parse_args()

itk_lib_dir = args.itk
vmtk_lib_dir = args.vmtk

def GetDependencies(lib):
    ans = subprocess.check_output(['otool', '-L', lib])
    ans = ans.splitlines()

    return [line.split()[0] for line in ans]

def SortDependencies(lib):
    deps = GetDependencies(lib)
    ans = {'abs': [],
           'rpath': [],
           'plain': [],
           'loader_path': []}
    for d in deps:
        if d.startswith('/'):
            ans['abs'].append(d)
        elif d.startswith('@rpath'):
            ans['rpath'].append(d)
        elif d.startswith('@loader_path'):
            ans['loader_path'].append(d)
        else:
            ans['plain'].append(d)
            pass
        continue
    return ans

def GetRpaths(lib):
    data = subprocess.check_output(['otool', '-l', lib]).splitlines()
    rpaths = set()
    rpathOffset = None
    for line in data:
        if rpathOffset is None:
            bits = line.split()
            if len(bits) == 2 and bits[0] == 'cmd' and bits[1] == 'LC_RPATH':
                rpathOffset = 0
                pass
            
            continue
        elif rpathOffset == 0:
            rpathOffset = 1
            continue
        elif rpathOffset == 1:
            bits = line.split()
            assert len(bits) >= 2
            assert bits[0] == 'path'
            rpaths.add(bits[1])
            rpathOffset = None
            pass
        
        continue
    return rpaths

import vtk
a_vtk_python_extension = vtk.libvtkCommonPython.__file__
for d in GetDependencies(a_vtk_python_extension):
    if not d.endswith('.dylib'):
        continue
    
    if d.find('libvtkCommon') != -1:
        a_vtk_lib_path = d.replace('@loader_path', os.path.dirname(a_vtk_python_extension))
        break
    continue

vtk_lib_dir = os.path.normpath(os.path.dirname(a_vtk_lib_path))

vmtk_python_dir = os.path.join(vmtk_lib_dir, 'vmtk')

for library in glob.glob(os.path.join(vmtk_python_dir, 'libvtkvmtk*.so')):
    print 'Checking {}'.format(library)
    deps = SortDependencies(library)['plain']
    rpaths = GetRpaths(library)
    
    needed_rpaths = set()
    for dep in deps:
        if dep.startswith('libvtkvmtk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(vmtk_lib_dir)
        elif dep.startswith('libvtk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(vtk_lib_dir)
        elif dep.lower().startswith('libitk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(itk_lib_dir)
            pass
        continue

    missing_rpaths = needed_rpaths - rpaths
    for rpath in missing_rpaths:
        print '    Add rpath {}'.format(rpath)
        subprocess.check_output(['install_name_tool', '-add_rpath', rpath, library])
        continue
    continue

for library in glob.glob(os.path.join(vmtk_lib_dir, 'libvtkvmtk*.dylib')):
    print 'Checking {}'.format(library)
    deps = SortDependencies(library)['plain']
    rpaths = GetRpaths(library)
    
    needed_rpaths = set()
    for dep in deps:
        if dep == os.path.basename(library):
            continue
        
        if dep.startswith('libvtkvmtk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(library_dir)
        elif dep.startswith('libvtk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(vtk_lib_dir)
        elif dep.lower().startswith('libitk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(itk_lib_dir)
            pass
        continue

    missing_rpaths = needed_rpaths - rpaths
    for rpath in missing_rpaths:
        print '    Add rpath {}'.format(rpath)
        subprocess.check_output(['install_name_tool', '-add_rpath', rpath, library])
        continue
    continue

for library in (glob.glob(os.path.join(itk_lib_dir, 'libITK*.dylib')) +
                glob.glob(os.path.join(itk_lib_dir, 'libitk*.dylib'))):
    
    if os.path.islink(library):
        continue
    print 'Checking {}'.format(library)
    deps = SortDependencies(library)['plain']
    rpaths = GetRpaths(library)
    
    needed_rpaths = set()
    for dep in deps:
        if dep == os.path.basename(library):
            continue
        potential_self = os.path.join(os.path.dirname(library), dep)
        if os.path.exists(potential_self):
            if os.path.realpath(potential_self) == library:
                continue
            pass
        
        if dep.lower().startswith('libitk'):
            new_dep = '@rpath/' + dep
            print '    Add rpath for dep {}'.format(dep)
            subprocess.check_output(['install_name_tool', '-change', dep, new_dep, library])
            needed_rpaths.add(library_dir)
            pass
        continue

    missing_rpaths = needed_rpaths - rpaths
    for rpath in missing_rpaths:
        print '    Add rpath {}'.format(rpath)
        subprocess.check_output(['install_name_tool', '-add_rpath', rpath, library])
        continue
    continue
